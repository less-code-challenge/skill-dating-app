service: skill-dating-app-backend-core

package:
  exclude:
    - ./**
  include:
    - dist/**

custom:
  userProfileTableName: 'user-profile-table-${self:provider.stage}'
  skillTableName: 'skill-table-${self:provider.stage}'
  skillGsi: 'SKILL_GSI'
  skillNameGsi: 'SKILL_NAME_GSI'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1

  httpApi:
    payload: '2.0'
    cors: true
    authorizers:
      cognitoAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_Fst1zV7Ho
        # Audience for which access is intended
        # In case of Cognito User Pools we need to list client ids
        audience:
          - 66ihqtvesmfk01jrl0ht4o48ob

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sts:AssumeRole
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:ListTables
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:TransactWriteItems
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeReservedCapacity
        - dynamodb:DescribeReservedCapacityOfferings
      Resource:
        - { "Fn::GetAtt": [ "UserProfileDynamoDBTable", "Arn" ] }
        - Fn::Join:
            - '/'
            - - { "Fn::GetAtt": [ "UserProfileDynamoDBTable", "Arn" ] }
              - 'index/*'
        - { "Fn::GetAtt": [ "SkillDynamoDBTable", "Arn" ] }
        - Fn::Join:
            - '/'
            - - { "Fn::GetAtt": [ "SkillDynamoDBTable", "Arn" ] }
              - 'index/*'

  environment:
    userProfileTable: ${self:custom.userProfileTableName}
    skillTable: ${self:custom.skillTableName}
    skillGsi: ${self:custom.skillGsi}
    skillNameGsi: ${self:custom.skillNameGsi}

functions:
  appPreflight: # allow unauthorized OPTIONS (preflight) requests
    handler: dist/index.handler # after 'npm run deploy' index.ts is transpiled to dist/index.js
    events:
      - httpApi: OPTIONS /{proxy+}
  app: # the default 'catch all' route only
    handler: dist/index.handler # after 'npm run deploy' index.ts is transpiled to dist/index.js
    events:
      - httpApi:
          method: '*'
          path: '*'
          authorizer: cognitoAuthorizer
  dynamodbStreamToElasticsearch:
    handler: dist/dynamodb-stream-handler.handler
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          enabled: true
          arn: { "Fn::GetAtt": [ "SkillDynamoDBTable", "StreamArn" ] }

resources:
  Resources:
    UserProfileDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:custom.userProfileTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.skillGsi}
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    SkillDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:custom.skillTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.skillNameGsi}
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
